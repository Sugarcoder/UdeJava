----------In Main.java----------

public class Main {

    public static void main(String[] args) {

        Animal animal = new Animal("Animal", 1, 1, 5, 5);

        Dog dog = new Dog("Yorkie", 8, 20, 2,4,1,20, "long coat");

        dog.eat();

         dog.walk();

        // dog.run();
    }

}



----------In Animal.java----------

public class Animal {

    private String name;
    private int brain;
    private int body;
    private int size;
    private int weight;


    public Animal(String name, int brain, int body, int size, int weight) {
        this.name = name;
        this.brain = brain;
        this.body = body;
        this.size = size;
        this.weight = weight;
    }

    // method that is relevant to all animals

    public void eat() {
        System.out.println("Animal.eat() called");
    }


    public void move(int speed) {
        System.out.println("Animal.move() called. Animal is moving at " + speed);
    }
    

    public String getName() {
        return name;
    }

    public int getBrain() {
        return brain;
    }

    public int getBody() {
        return body;
    }

    public int getSize() {
        return size;
    }

    public int getWeight() {
        return weight;
    }
}



----------In Dog.java-----------

public class Dog extends Animal {

    // unique characteristics relating to a Dog only

    private int eyes;
    private int legs;
    private int tail;
    private int teeth;
    private String coat;



    // These are the basic characteristics from the Animal class

    public Dog(String name, int size, int weight, int eyes, int legs, int tail, int teeth, String coat) {
        super(name, 1, 1, size, weight);      // '1' just means all Dogs have this, but you remove it from the constructor
        // Initialize the fields
        this.eyes = eyes;
        this.legs = legs;
        this.tail = tail;
        this.teeth = teeth;
        this.coat = coat;

    }


    private void chew() {
        System.out.println("Dog.chew() called");
    }


    @Override        // Now, both classes have their own eat() methods

    public void eat() {
        System.out.println("Dog.eat() called");
        chew();
        super.eat();      // call the 'super' equivalent to that class
    }


    public void walk() {
        System.out.println("Dog.walk() called");
        super.move(5);
    }


    public void run() {
        System.out.println("Dog.run() called");
        move(10);
    }


    public void moveLegs(int speed) {
        System.out.println("Dog.moveLegs() called");
    }


    @Override
    public void move(int speed) {
        System.out.println("Dog.move() called");
        moveLegs(speed);
        super.move(speed);
    }
}



----------In Fish.java-----------

public class Fish extends Animal {

    private int gills;
    private int eyes;
    private int fins;

    public Fish(String name, int size, int weight, int gills, int eyes, int fins) {
        super(name, 1, 1, size, weight);
        this.gills = gills;
        this.eyes = eyes;
        this.fins = fins;
    }


    private void rest() {
    }

    
    private void swim(int speed) {
        moveMuscles();
        moveBackFin();
        super.move(speed);
    }


    private void moveMuscles() {
    }
    
    
    private void moveBackFin() {
    }

}


